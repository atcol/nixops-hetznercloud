#! /usr/bin/env bash

# This is a stripped back version of the original nixos-infect, streamlined for
# preparing Hetzner Cloud servers for NixOps deployments. It assumes that Ubuntu
# 20.04 is the base OS for lustration as this is hardcoded in the NixOps plugin
# which uses this script. The NixOps created ssh host keys will be persisted
# through the lustration process.

# More info at: https://github.com/elitak/nixos-infect

set -e -o pipefail

makeConf() {
  # NB <<"EOF" quotes / $ ` in heredocs, <<EOF does not
  mkdir -p /etc/nixos
  # Prevent grep for sending error code 1 (and halting execution) when no lines are selected : https://www.unix.com/man-page/posix/1P/grep
  local IFS=$'\n' 
  for trypath in /root/.ssh/authorized_keys $HOME/.ssh/authorized_keys; do 
      [[ -r "$trypath" ]] \
      && keys=$(sed -E 's/^.*((ssh|ecdsa)-[^[:space:]]+)[[:space:]]+([^[:space:]]+)([[:space:]]*.*)$/\1 \3\4/' "$trypath") \
      && break
  done

  cat > /etc/nixos/configuration.nix << EOF
# generated by nixos-infect
{ ... }: {
  imports = [
    ./hardware-configuration.nix
  ];
  boot.cleanTmpDir = true;
  networking.hostName = "$(hostname)";
  networking.firewall.allowPing = true;
  services.openssh.enable = true;
  users.users.root.openssh.authorizedKeys.keys = [$(while read -r line; do echo -n "
    \"$line\" "; done <<< "$keys")
  ];
  system.activationScripts.cleanup = {
    text = "rm -rf /old-root";
    deps = [];
  };
}
EOF
  cat > /etc/nixos/hardware-configuration.nix << EOF
# generated by nixos-infect
{ ... }:
{
  imports = [ <nixpkgs/nixos/modules/profiles/qemu-guest.nix> ];
  boot.loader.grub.device = "$grubdev";
  fileSystems."/" = { device = "$rootfsdev"; fsType = "ext4"; };
}
EOF
}

makeSwap() {
  # TODO check currently available swapspace first
  swapFile=$(mktemp /tmp/nixos-infect.XXXXX.swp)
  dd if=/dev/zero "of=$swapFile" bs=1M count=$((1*1024))
  chmod 0600 "$swapFile"
  mkswap "$swapFile"
  swapon -v "$swapFile"
}

removeSwap() {
  swapoff -a
  rm -vf /tmp/nixos-infect.*.swp
}

prepareEnv() {
  # $grubdev is used in makeConf()
  for grubdev in /dev/vda /dev/sda; do [[ -e $grubdev ]] && break; done

  # Retrieve root fs block device
  #                   (get root mount)  (get partition or logical volume)
  rootfsdev=$(mount | grep "on / type" | awk '{print $1;}')

  # shellcheck disable=SC2174
  mkdir -p -m 0755 /nix
}

infect() {
  # Add nix build users
  # FIXME run only if necessary, rather than defaulting true
  groupadd nixbld -g 30000 || true
  for i in {1..10}; do useradd -c "Nix build user $i" -d /var/empty -g nixbld -G nixbld -M -N -r -s "$(which nologin)" nixbld$i || true; done
  
  curl -L https://nixos.org/nix/install | $SHELL

  # shellcheck disable=SC1090
  source ~/.nix-profile/etc/profile.d/nix.sh

  export NIXOS_CONFIG=/etc/nixos/configuration.nix

  nix-env --set \
    -f '<nixpkgs/nixos>' \
    -p /nix/var/nix/profiles/system \
    -A system

  # Remove nix installed with curl | bash
  rm -fv /nix/var/nix/profiles/default*
  /nix/var/nix/profiles/system/sw/bin/nix-collect-garbage

  # Reify resolv.conf
  [[ -L /etc/resolv.conf ]] && mv -v /etc/resolv.conf /etc/resolv.conf.lnk && cat /etc/resolv.conf.lnk > /etc/resolv.conf

  # Stage the Nix coup d'Ã©tat
  touch /etc/NIXOS
  echo etc/nixos                    >  /etc/NIXOS_LUSTRATE
  echo etc/resolv.conf              >> /etc/NIXOS_LUSTRATE
  echo root/.nix-defexpr/channels   >> /etc/NIXOS_LUSTRATE
  echo etc/ssh/ssh_host_ed25519_key     >> /etc/NIXOS_LUSTRATE
  echo etc/ssh/ssh_host_ed25519_key.pub >> /etc/NIXOS_LUSTRATE
  
  rm -rf /boot.bak
  mv -v /boot /boot.bak
  /nix/var/nix/profiles/system/bin/switch-to-configuration boot
}

prepareEnv
makeSwap # smallest (1GB) server needs extra memory!
makeConf
infect
removeSwap
